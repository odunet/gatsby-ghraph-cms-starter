{"version":3,"sources":["src/gatsby-node.js"],"names":["pluginOptionsSchema","Joi","object","buildMarkdownNodes","boolean","description","default","downloadLocalImages","endpoint","string","required","fragmentsPath","locales","array","items","min","stages","token","typePrefix","queryConcurrency","number","integer","createSourcingConfig","gatsbyApi","execute","operationName","query","variables","reporter","method","body","JSON","stringify","headers","Authorization","then","response","ok","statusText","json","errors","catch","error","schema","nodeInterface","getType","queryFields","getFields","possibleTypes","getPossibleTypes","typeMap","getTypeMap","richTextTypes","Object","keys","filter","typeName","endsWith","map","value","replace","Boolean","singularRootFieldName","type","find","fieldName","pluralRootFieldName","String","name","hasLocaleField","locale","gatsbyNodeTypes","remoteTypeName","queries","stage","join","nodeQueryVariables","id","where","fragmentsDir","process","cwd","fs","existsSync","mkdirSync","addSystemFieldArguments","field","includes","variation","fragments","defaultArgumentValues","documents","customFragments","concurrency","gatsbyTypePrefix","gatsbyNodeDefs","createSchemaCustomization","pluginOptions","webhookBody","actions","createTypes","config","length","operation","data","nodeEvent","__typename","eventName","remoteId","localizations","nodeEvents","onCreateNode","node","createNode","createNodeField","createNodeId","getCache","cache","mimeType","fileNode","url","parentNodeId","fileName","e","console","PLUGIN_NAME","fields","entries","key","forEach","decodedMarkdown","he","decode","markdown","markdownNode","parent","internal","mediaType","content","contentDigest","crypto","createHash","update","digest","generateImageSource","baseURL","width","height","format","fit","quality","src","makeResolveGatsbyImageData","resolveGatsbyImageData","handle","filename","options","imageDataArgs","pluginName","sourceMetadata","split","placeholder","lowResImageURL","imageBase64","placeholderURL","backgroundColor","createResolvers","args","resolvers","gatsbyImageData","File"],"mappings":"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","sourcesContent":["import crypto from 'crypto'\nimport fs from 'fs'\nimport {\n  wrapQueryExecutorWithQueue,\n  loadSchema,\n  readOrGenerateDefaultFragments,\n  compileNodeQueries,\n  buildNodeDefinitions,\n  createSchemaCustomization as createToolkitSchemaCustomization,\n  sourceAllNodes,\n  sourceNodeChanges,\n} from 'gatsby-graphql-source-toolkit'\nimport {\n  generateImageData,\n  getLowResolutionImageURL,\n} from 'gatsby-plugin-image'\nimport { getGatsbyImageResolver } from 'gatsby-plugin-image/graphql-utils'\nimport { createRemoteFileNode } from 'gatsby-source-filesystem'\nimport he from 'he'\nimport fetch from 'node-fetch'\n\nimport { PLUGIN_NAME } from './util/constants'\nimport { getImageBase64, getBase64DataURI } from './util/getImageBase64'\nimport { getImageDominantColor } from './util/getDominantColor'\nimport { getTracedSVG } from './util/getTracedSVG'\nimport { reportPanic } from './util/reportPanic'\n\nexport function pluginOptionsSchema({ Joi }) {\n  return Joi.object({\n    buildMarkdownNodes: Joi.boolean()\n      .description(\n        `Build markdown nodes for all [RichText](https://graphcms.com/docs/reference/fields/rich-text) fields in your GraphCMS schema`\n      )\n      .default(false),\n    downloadLocalImages: Joi.boolean()\n      .description(\n        `Download and cache GraphCMS image assets in your Gatsby project`\n      )\n      .default(false),\n    endpoint: Joi.string()\n      .description(\n        `The endpoint URL for the GraphCMS project. This can be found in the [project settings UI](https://graphcms.com/docs/guides/concepts/apis#working-with-apis)`\n      )\n      .required(),\n    fragmentsPath: Joi.string()\n      .description(\n        `The local project path where generated query fragments are saved. This is relative to your current working directory. If using multiple instances of the source plugin, you **must** provide a value here to prevent type and/or fragment conflicts.`\n      )\n      .default(`graphcms-fragments`),\n    locales: Joi.array()\n      .description(\n        `An array of locale key strings from your GraphCMS project. You can read more about working with localisation in GraphCMS [here](https://graphcms.com/docs/guides/concepts/i18n).`\n      )\n      .items(Joi.string())\n      .min(1)\n      .default(['en']),\n    stages: Joi.array()\n      .description(\n        `An array of Content Stages from your GraphCMS project. You can read more about using Content Stages [here](https://graphcms.com/guides/working-with-content-stages).`\n      )\n      .items(Joi.string())\n      .min(1)\n      .default(['PUBLISHED']),\n    token: Joi.string().description(\n      `If your GraphCMS project is **not** publicly accessible, you will need to provide a [Permanent Auth Token](https://graphcms.com/docs/reference/authorization) to correctly authorize with the API. You can learn more about creating and managing API tokens [here](https://graphcms.com/docs/guides/concepts/apis#working-with-apis)`\n    ),\n    typePrefix: Joi.string()\n      .description(\n        `The string by which every generated type name is prefixed with. For example, a type of Post in GraphCMS would become GraphCMS_Post by default. If using multiple instances of the source plugin, you **must** provide a value here to prevent type conflicts`\n      )\n      .default(`GraphCMS_`),\n    queryConcurrency: Joi.number()\n      .integer()\n      .min(1)\n      .default(10)\n      .description(`The number of promises to run at one time.`),\n  })\n}\n\nconst createSourcingConfig = async (\n  gatsbyApi,\n  {\n    endpoint,\n    fragmentsPath,\n    locales,\n    stages,\n    token,\n    typePrefix,\n    queryConcurrency,\n  }\n) => {\n  const execute = async ({ operationName, query, variables = {} }) => {\n    const { reporter } = gatsbyApi\n\n    return await fetch(endpoint, {\n      method: 'POST',\n      body: JSON.stringify({ query, variables, operationName }),\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && { Authorization: `Bearer ${token}` }),\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          return reportPanic(\n            1,\n            'Problem building GraphCMS nodes',\n            response.statusText,\n            reporter\n          )\n        }\n\n        return response.json()\n      })\n      .then((response) => {\n        if (response.errors) {\n          return reportPanic(\n            2,\n            'Problem building GraphCMS nodes',\n            JSON.stringify(response.errors, null, 2),\n            reporter\n          )\n        }\n\n        return response\n      })\n      .catch((error) => {\n        return reportPanic(\n          3,\n          'Problem building GraphCMS nodes',\n          JSON.stringify(error, null, 2),\n          reporter\n        )\n      })\n  }\n  const schema = await loadSchema(execute)\n\n  const nodeInterface = schema.getType('Node')\n  const query = schema.getType('Query')\n  const queryFields = query.getFields()\n  const possibleTypes = schema.getPossibleTypes(nodeInterface)\n  const typeMap = schema.getTypeMap()\n\n  const richTextTypes = Object.keys(typeMap)\n    .filter((typeName) => typeName.endsWith('RichText'))\n    .map((value) => value.replace('RichText', ''))\n    .filter(Boolean)\n\n  const singularRootFieldName = (type) =>\n    Object.keys(queryFields).find(\n      (fieldName) => queryFields[fieldName].type === type\n    )\n\n  const pluralRootFieldName = (type) =>\n    Object.keys(queryFields).find(\n      (fieldName) => String(queryFields[fieldName].type) === `[${type.name}!]!`\n    )\n\n  const hasLocaleField = (type) => type.getFields().locale\n\n  const gatsbyNodeTypes = possibleTypes.map((type) => ({\n    remoteTypeName: type.name,\n    queries: [\n      ...locales.map((locale) =>\n        stages.map(\n          (stage) => `\n          query LIST_${pluralRootFieldName(\n            type\n          )}_${locale}_${stage} { ${pluralRootFieldName(type)}(first: $limit, ${\n            hasLocaleField(type) ? `locales: [${locale}]` : ''\n          }, skip: $offset, stage: ${stage}) {\n              ..._${type.name}Id_\n            }\n          }`\n        )\n      ),\n      `query NODE_${singularRootFieldName(type)}{ ${singularRootFieldName(\n        type\n      )}(where: $where, ${hasLocaleField(type) ? `locales: $locales` : ''}) {\n        ..._${type.name}Id_\n        }\n      }\n      fragment _${type.name}Id_ on ${type.name} {\n        __typename\n        id\n        ${hasLocaleField(type) ? `locale` : ''}\n        stage\n      }`,\n    ].join('\\n'),\n    nodeQueryVariables: ({ id, locale, stage }) => ({\n      where: { id },\n      locales: [locale],\n      stage,\n    }),\n  }))\n\n  const fragmentsDir = `${process.cwd()}/${fragmentsPath}`\n\n  if (!fs.existsSync(fragmentsDir)) fs.mkdirSync(fragmentsDir)\n\n  const addSystemFieldArguments = (field) => {\n    if (['createdAt', 'publishedAt', 'updatedAt'].includes(field.name))\n      return { variation: `COMBINED` }\n  }\n\n  const fragments = await readOrGenerateDefaultFragments(fragmentsDir, {\n    schema,\n    gatsbyNodeTypes,\n    defaultArgumentValues: [addSystemFieldArguments],\n  })\n\n  const documents = compileNodeQueries({\n    schema,\n    gatsbyNodeTypes,\n    customFragments: fragments,\n  })\n\n  return {\n    gatsbyApi,\n    schema,\n    execute: wrapQueryExecutorWithQueue(execute, {\n      concurrency: queryConcurrency,\n    }),\n    gatsbyTypePrefix: typePrefix,\n    gatsbyNodeDefs: buildNodeDefinitions({ gatsbyNodeTypes, documents }),\n    richTextTypes,\n  }\n}\n\nexport async function createSchemaCustomization(gatsbyApi, pluginOptions) {\n  const {\n    webhookBody,\n    actions: { createTypes },\n  } = gatsbyApi\n  const {\n    buildMarkdownNodes = false,\n    downloadLocalImages = false,\n    typePrefix = 'GraphCMS_',\n  } = pluginOptions\n\n  const config = await createSourcingConfig(gatsbyApi, pluginOptions)\n\n  const { richTextTypes } = config\n\n  await createToolkitSchemaCustomization(config)\n\n  if (webhookBody && Object.keys(webhookBody).length) {\n    const { operation, data } = webhookBody\n\n    const nodeEvent = (operation, { __typename, locale, id }) => {\n      switch (operation) {\n        case 'delete':\n        case 'unpublish':\n          return {\n            eventName: 'DELETE',\n            remoteTypeName: __typename,\n            remoteId: { __typename, locale, id },\n          }\n        case 'create':\n        case 'publish':\n        case 'update':\n          return {\n            eventName: 'UPDATE',\n            remoteTypeName: __typename,\n            remoteId: { __typename, locale, id },\n          }\n      }\n    }\n\n    const { localizations = [{ locale: 'en' }] } = data\n\n    await sourceNodeChanges(config, {\n      nodeEvents: localizations.map(({ locale }) =>\n        nodeEvent(operation, { locale, ...data })\n      ),\n    })\n  } else {\n    await sourceAllNodes(config)\n  }\n\n  if (downloadLocalImages)\n    createTypes(`\n      type ${typePrefix}Asset {\n        localFile: File @link(from: \"fields.localFile\")\n      }\n    `)\n\n  if (buildMarkdownNodes)\n    createTypes(`\n      type ${typePrefix}MarkdownNode implements Node {\n        id: ID!\n      }\n      type ${typePrefix}RichText {\n        markdownNode: ${typePrefix}MarkdownNode @link\n      }\n      ${richTextTypes.map(\n        (typeName) => `\n          type ${typePrefix}${typeName}RichText implements Node {\n            markdownNode: ${typePrefix}MarkdownNode @link\n          }\n      `\n      )}\n    `)\n}\n\nexport async function onCreateNode(\n  {\n    node,\n    actions: { createNode, createNodeField },\n    createNodeId,\n    getCache,\n    cache,\n  },\n  {\n    buildMarkdownNodes = false,\n    downloadLocalImages = false,\n    typePrefix = 'GraphCMS_',\n  }\n) {\n  if (\n    downloadLocalImages &&\n    node.remoteTypeName === 'Asset' &&\n    ['image/png', 'image/jpg', 'image/jpeg', 'image/tiff', 'image/webp'].includes(\n      node.mimeType\n    )\n  ) {\n    try {\n      const fileNode = await createRemoteFileNode({\n        url: node.url,\n        parentNodeId: node.id,\n        createNode,\n        createNodeId,\n        cache,\n        getCache,\n        ...(node.fileName && { name: node.fileName }),\n      })\n\n      if (fileNode) {\n        createNodeField({ node, name: 'localFile', value: fileNode.id })\n      }\n    } catch (e) {\n      console.error(`[${PLUGIN_NAME}]`, e)\n    }\n  }\n\n  if (buildMarkdownNodes) {\n    const fields = Object.entries(node)\n      .map(([key, value]) => ({ key, value }))\n      .filter(\n        ({ value }) =>\n          value &&\n          value.remoteTypeName &&\n          value.remoteTypeName.endsWith('RichText')\n      )\n\n    if (fields.length) {\n      fields.forEach((field) => {\n        const decodedMarkdown = he.decode(field.value.markdown)\n\n        const markdownNode = {\n          id: `MarkdownNode:${createNodeId(`${node.id}-${field.key}`)}`,\n          parent: node.id,\n          internal: {\n            type: `${typePrefix}MarkdownNode`,\n            mediaType: 'text/markdown',\n            content: decodedMarkdown,\n            contentDigest: crypto\n              .createHash(`md5`)\n              .update(decodedMarkdown)\n              .digest(`hex`),\n          },\n        }\n\n        createNode(markdownNode)\n\n        field.value.markdownNode = markdownNode.id\n      })\n    }\n  }\n}\n\nconst generateImageSource = (\n  baseURL,\n  width,\n  height,\n  format,\n  fit = 'clip',\n  { quality = 100 }\n) => {\n  const src = `https://media.graphcms.com/resize=width:${width},height:${height},fit:${fit}/output=quality:${quality}/${baseURL}`\n\n  return { src, width, height, format }\n}\n\nfunction makeResolveGatsbyImageData(cache) {\n  return async function resolveGatsbyImageData(\n    { handle: filename, height, mimeType, width, url, internal },\n    options\n  ) {\n    if (\n      !['image/png', 'image/jpg', 'image/jpeg', 'image/tiff', 'image/webp'].includes(mimeType)\n    ) {\n      return null\n    }\n\n    const imageDataArgs = {\n      ...options,\n      pluginName: PLUGIN_NAME,\n      sourceMetadata: { format: mimeType.split('/')[1], height, width },\n      filename,\n      generateImageSource,\n      options,\n    }\n\n    if (options?.placeholder === `BLURRED`) {\n      const lowResImageURL = getLowResolutionImageURL(imageDataArgs)\n\n      const imageBase64 = await getImageBase64({\n        url: lowResImageURL,\n        cache,\n      })\n\n      imageDataArgs.placeholderURL = getBase64DataURI({\n        imageBase64,\n      })\n    }\n\n    if (options?.placeholder === `DOMINANT_COLOR`) {\n      const lowResImageURL = getLowResolutionImageURL(imageDataArgs)\n\n      imageDataArgs.backgroundColor = await getImageDominantColor({\n        url: lowResImageURL,\n        cache,\n      })\n    }\n\n    if (options?.placeholder === `TRACED_SVG`) {\n      imageDataArgs.placeholderURL = await getTracedSVG({\n        url,\n        internal,\n        filename,\n        cache,\n      })\n    }\n\n    return generateImageData(imageDataArgs)\n  }\n}\n\nexport function createResolvers(\n  { createResolvers, cache },\n  { typePrefix = 'GraphCMS_', downloadLocalImages = false }\n) {\n  const args = {\n    quality: {\n      type: `Int`,\n      description: `The default image quality generated. This is overridden by any format-specific options.`,\n    },\n    placeholder: {\n      type: `enum GraphCMSImagePlaceholder { NONE, BLURRED, DOMINANT_COLOR, TRACED_SVG }`,\n      description: `The style of temporary image shown while the full image loads.\n        BLURRED: generates a very low-resolution version of the image and displays it as a blurred background (default).\n        DOMINANT_COLOR: the dominant color of the image used as a solid background color.\n        TRACED_SVG: generates a simplified, flat SVG version of the source image, which it displays as a placeholder.\n        NONE: No placeholder. Use the backgroundColor option to set a static background if you wish.\n        `,\n    },\n  }\n\n  const resolvers = {\n    [`${typePrefix}Asset`]: {\n      gatsbyImageData: {\n        ...getGatsbyImageResolver(makeResolveGatsbyImageData(cache), args),\n        type: 'JSON',\n      },\n    },\n    ...(downloadLocalImages && {\n      File: {\n        gatsbyImageData: {\n          ...getGatsbyImageResolver(makeResolveGatsbyImageData(cache), args),\n          type: 'JSON',\n        },\n      },\n    }),\n  }\n\n  createResolvers(resolvers)\n}\n"],"file":"gatsby-node.js"}